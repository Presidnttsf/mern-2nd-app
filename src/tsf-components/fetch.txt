CRUD Methods with fetch in JavaScript

fetch is a built-in JavaScript API used to make HTTP requests. CRUD (Create, Read, Update, Delete) operations are the core functionalities when interacting with a backend API.

1. CREATE (POST) – Add a New Record

To create a new resource on the server, we use the POST method.

Example: Add a New Movie

const createMovie = async () => {
    const newMovie = {
        title: "Inception",
        director: "Christopher Nolan",
        year: 2010
    };

    const response = await fetch('https://api.example.com/movies', {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(newMovie) // Convert object to JSON string
    });

    const data = await response.json();
    console.log("Created Movie:", data);
};

createMovie();

✅ Explanation:
	•	Sends a POST request to https://api.example.com/movies.
	•	The body contains the new movie details (converted to JSON).
	•	Headers specify that the request body is JSON.
	•	Response is converted back to JSON and logged.

2. READ (GET) – Fetch Data

To retrieve data from the server, we use the GET method.

Example: Fetch All Movies

const fetchMovies = async () => {
    const response = await fetch('https://api.example.com/movies');
    const data = await response.json();
    console.log("Movies List:", data);
};

fetchMovies();

✅ Explanation:
	•	Sends a GET request to fetch all movies.
	•	The response is converted from JSON and logged.

Example: Fetch a Single Movie by ID

const fetchMovieById = async (id) => {
    const response = await fetch(https://api.example.com/movies/${id});
    const data = await response.json();
    console.log("Movie Details:", data);
};

fetchMovieById(1);

✅ Explanation:
	•	Sends a GET request to fetch a movie with a specific id.
	•	Example: Fetch movie with id = 1.

3. UPDATE (PUT/PATCH) – Modify a Record

To update an existing record, we use PUT (for full updates) or PATCH (for partial updates).

Example: Update a Movie (PUT)

const updateMovie = async (id) => {
    const updatedData = {
        title: "Inception",
        director: "Christopher Nolan",
        year: 2012 // Changed from 2010 to 2012
    };

    const response = await fetch(https://api.example.com/movies/${id}, {
        method: "PUT",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(updatedData)
    });

    const data = await response.json();
    console.log("Updated Movie:", data);
};

updateMovie(1);

✅ Explanation:
	•	Sends a PUT request to update the movie with id = 1.
	•	The entire updated object is sent.
	•	Response is converted to JSON and logged.

Example: Partial Update (PATCH)

const updateMovieYear = async (id, newYear) => {
    const response = await fetch(https://api.example.com/movies/${id}, {
        method: "PATCH",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ year: newYear }) // Only updating the year
    });

    const data = await response.json();
    console.log("Partially Updated Movie:", data);
};

updateMovieYear(1, 2015);

✅ Explanation:
	•	PATCH updates only one property (year) instead of sending the full object.

4. DELETE (DELETE) – Remove a Record

To remove data, we use the DELETE method.

Example: Delete a Movie

const deleteMovie = async (id) => {
    const response = await fetch(https://api.example.com/movies/${id}, {
        method: "DELETE"
    });

    if (response.ok) {
        console.log(Movie with ID ${id} deleted successfully.);
    } else {
        console.error("Failed to delete movie.");
    }
};

deleteMovie(1);

✅ Explanation:
	•	Sends a DELETE request to remove a movie with id = 1.
	•	Checks if the response is successful before logging a message.

Summary of CRUD Operations

Operation	HTTP Method	Purpose	Example URL
Create	POST	Add a new movie	/movies
Read (All)	GET	Get all movies	/movies
Read (One)	GET	Get a single movie by ID	/movies/1
Update (Full)	PUT	Update all fields	/movies/1
Update (Partial)	PATCH	Update specific fields	/movies/1
Delete	DELETE	Remove a movie	/movies/1

Additional Tips
	1.	Handle Errors Properly

const fetchMoviesSafe = async () => {
    try {
        const response = await fetch('https://api.example.com/movies');
        
        if (!response.ok) {
            throw new Error(HTTP error! Status: ${response.status});
        }

        const data = await response.json();
        console.log("Movies List:", data);
    } catch (error) {
        console.error("Error fetching movies:", error);
    }
};

fetchMoviesSafe();

✅ Why?
	•	Prevents app crashes if the API is down.
	•	response.ok ensures valid HTTP response before proceeding.

	2.	Use async/await for Better Readability

	•	Avoids callback hell and makes code cleaner.

	3.	Use try...catch in All Fetch Calls

	•	Always wrap fetch calls in try...catch for error handling.

Conclusion

Using fetch, you can perform all CRUD operations in a clean and efficient way.